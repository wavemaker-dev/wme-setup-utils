---
- name: aws platform instances setup
  hosts: all
  become: yes
  any_errors_fatal: true
  vars:
    installer_link: "{{ wme_installer_url }}"
    patch_installer_link: "{{ wme_patch_installer_url | default('') }}"
    platform_ip: "{{ platform_instance_ip }}"
    admin_passwd: "{{ setup_admin_password }}"
    enterprise_name: "{{ enterprise_name }}"
    user_mail: "{{ admin_Email_Address }}"
    first_name: "{{ admin_user_firstname }}"
    last_name: "{{ admin_user_lastname }}"
    user_password: "{{ admin_user_password }}"
    rhel_os_version: "{{ operating_version }}"
    custom_user_setup: "{{ setup_with_custom_sshkeys }}"
    customuser_name: "{{ internal_user_for_wavemaker }}"
    ent_domain_name: "{{ wavemaker_studio_domain }}"
    cloud_domain_name: "{{ wavemaker_built_apps_domain }}"
    user_pemfile: "{{ internal_user_ssh_key_for_wavemaker }}" # custom user private key path in local
    rhel_os_user_name: "{{ os_user_name }}"
    debian_os_user_name: "{{ os_user_name }}"
    platform_network_interfacename: "{{ network_interface_name }}"
    CIDR_range_for_wme_setup: "{{ cidr_range_for_docker_setup }}"
    sha1sum_link: "{{ wme_sha1sum_url }}"
    

  tasks:
  # aws instance operations(volume mounting)
  - name: finding volume device type for nitro volumes
    shell: lsblk -o NAME -n | grep nvme*
    register: nitro_volumes
    ignore_errors: True

  - name: finding volume device for ebs volumes
    shell: lsblk -o NAME -n | grep xvd*
    register: ebs_volumes
    ignore_errors: True

  - name: creating file system for ebs volumes
    filesystem:
      fstype: ext4
      dev: "{{ item }}"
    with_items:
      - /dev/xvdb
      - /dev/xvdc
    when: ebs_volumes.rc == 0

  - name: creating file system for nitro volumes
    filesystem:
      fstype: ext4
      dev: "{{ item }}"
    with_items:
      - /dev/nvme1n1
      - /dev/nvme2n1
    when: nitro_volumes.rc == 0

  - name: Create a directory data-volumes
    file:
      path: "{{ item }}"
      state: directory
      mode: '0755'
    with_items:
      - /wm-runtime
      - /wm-data

  - name: mounting wm-data volume for ebs volumes
    mount:
      path: /wm-data
      src: /dev/xvdb
      fstype: ext4
      state: mounted
    when: ebs_volumes.rc == 0
  - name: mounting wm-runtime volume for ebs volumes
    mount:
      path: /wm-runtime
      src: /dev/xvdc
      fstype: ext4
      state: mounted
    when: ebs_volumes.rc == 0

  - name: mounting wm-data volume for nitro volumes
    mount:
      path: /wm-data
      src: /dev/nvme2n1
      fstype: ext4
      state: mounted
    when: nitro_volumes.rc == 0
  - name: mounting wm-runtime volume for nitro volumes
    mount:
      path: /wm-runtime
      src: /dev/nvme1n1
      fstype: ext4
      state: mounted
    when: nitro_volumes.rc == 0
   
# updating cache for debian and RHEL
  - name: update cache for debian
    apt:
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: update cache for RHEL
    yum:
      name: "*"
      state: latest
    when: ansible_os_family == "RedHat"

# installing pip3,wget and pexpect 
  - name: installing pip3 and wget
    package:
      name: 
        - python3-pip
        - wget
      state: present
    
  - name: providing functionality of pip using pip3
    alternatives:
      name: pip
      link: /usr/bin/pip
      path: /usr/bin/pip3
      priority: 1
    when: ansible_os_family == "RedHat"
  

  - name: install pexpect for wme installation setup inputs
    pip:
      name: pexpect
    ignore_errors: True


# RHEL instance prerequisites installing and IPv6 disable
  - name: ipv6 disable in RHEL
    lineinfile:
      path: /etc/default/grub
      regexp: "^GRUB_CMDLINE_LINUX="
      line: 'GRUB_CMDLINE_LINUX="ipv6.disable=1 console=ttyS0,115200n8 console=tty0 net.ifnames=0 rd.blacklist=nouveau nvme_core.io_timeout=4294967295 crashkernel=auto"'
    when: ansible_os_family == "RedHat"    
  
  - name: updating grub conf file in rhel for ipv6 disable
    shell: grub2-mkconfig -o /boot/grub2/grub.cfg
    when: ansible_os_family == "RedHat"

  - name: reboot the system for updating the grub configurations
    reboot:
    when: ansible_os_family == "RedHat"
  
  - name: installing SELinux container on RHEL 7 from remote url
    yum:
      name: http://ftp.riken.jp/Linux/cern/centos/7/extras/x86_64/Packages/container-selinux-2.10-2.el7.noarch.rpm
      state: present
    when: 
      - ansible_os_family == "RedHat"
      - rhel_os_version == "7"

  
  - name: installing Docker and python3
    yum:
      name: 
      - https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.06.2.ce-3.el7.x86_64.rpm
      - python3
    when: ansible_os_family == "RedHat"

  
  - name: starting Docker in rhel
    service: 
      name: docker
      state: started
      enabled: yes
    become: true
    when: ansible_os_family == "RedHat"

  - name: adding rhel os user to the docker group
    shell: usermod -aG docker {{ rhel_os_user_name }}  
    when: 
     - ansible_os_family == "RedHat"
     - custom_user_setup == "no"

  - name: reboot the system for docker configure
    reboot:
    when: 
     - ansible_os_family == "RedHat"
     - custom_user_setup == "no"


# installing deb file and finding debfilename and installation folder
 # echo {{ installer_link }} | awk -F/ '{print $8}' 
 # echo {{ sha1sum_link }} | awk -F/ '{print $8}'
  - name: finding a sha1sum file
    shell:
      cmd: echo {{ sha1sum_link }} | awk -F/ '{print $8}' 
    register: sha1sum_file
    when: 
      - sha1sum_link != ""
      

  - name: finding sha1sum file name 
    shell: echo {{ sha1sum_file.stdout }} | awk -F/ '{print $8}' | awk -F? '{print $1}'
    register: sha1sum_file_name
    when: 
      - sha1sum_link != ""
      
    

  - name: finding a deb file
    shell:
      cmd: echo {{ installer_link }} | awk -F/ '{print $8}'  
      chdir: /home/{{ debian_os_user_name }}/
    register: deb_file
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
      - sha1sum_link != ""
    
  - name: finding a deb file name with sha1sum url
    shell: echo {{ deb_file.stdout }} | awk -F/ '{print $8}' | awk -F? '{print $1}'
    register: deb_file_name_from_url
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
      - sha1sum_link != ""
  
  - name: setting debfile name from sha1sum url
    set_fact:
      deb_file_name: "{{ deb_file_name_from_url.stdout }}"
    when: deb_file_name_from_url.changed 
  
    
  - name: finding a deb file name from without sha1sum url
    shell:
      cmd: echo {{ installer_link }} | awk -F/ '{print $8}'  
      chdir: /home/{{ debian_os_user_name }}/
    register: deb_file_name_from_url
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
      - sha1sum_link == ""
  
  - name: setting debfile name from without sha1sum url
    set_fact:
      deb_file_name: "{{ deb_file_name_from_url.stdout }}"
    when: deb_file_name_from_url.changed 
  
  - name: getting wme-installer folder name
    shell:
      cmd: echo {{ deb_file_name }} | awk -F- '{print $3}' | sed 's/.deb//g'
      chdir: /home/{{ debian_os_user_name }}/
    register: wme_folder_name
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
  
  - name: downloading the sha1sum file
    get_url: 
      url: "{{ sha1sum_link }}"
      dest: /home/{{ debian_os_user_name }}/
      mode: '0755'
    when:
      - sha1sum_link != ""
      - ansible_os_family == "Debian"

  - name: downloading the wme deb file
    get_url: 
      url: "{{ installer_link }}"
      dest: /home/{{ debian_os_user_name }}/
      mode: '0755'
    when:
      - installer_link != ""
      - ansible_os_family == "Debian"
    
  - name: sha1sum checking for wme installer file
    shell: sha1sum -c {{ sha1sum_file_name.stdout }}
    args:
      chdir: /home/{{ debian_os_user_name }}/
    register: sha1sum_result
    failed_when: sha1sum_result.rc != 0
    when:
      - installer_link != ""
      - sha1sum_link != ""
      - ansible_os_family == "Debian"
    

  - name: unpack the debian file
    shell: dpkg -i {{ deb_file_name }}
    args:
      chdir: /home/{{ debian_os_user_name }}/
    when:
      - installer_link != ""
      - ansible_os_family == "Debian"
   
# installing wme in debian Platform Instance below version 10.5.1   

  - name: installing wme setup in Debian
    expect:
      command: bash /usr/local/content/wme/wme-installer/{{ wme_folder_name.stdout }}/wme-installer.sh
      responses:
        (?i)Enter an interface name assigned to a network *: "{{ platform_network_interfacename }}"
        (?i)Do you want to proceed *: y
        (?i)Enter an IP range in CIDR notation for internal use *: "{{ CIDR_range_for_wme_setup }}"
      timeout: 1000
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
      - custom_user_setup == ""

    # custom user creation in instance 
    

  - name: adding custom user
    user:
      name: "{{ customuser_name }}"
      shell: /bin/bash
    when: 
      - custom_user_setup == "yes"

  - name: creating .ssh folder for custom user
    file:
      path: /home/{{ customuser_name }}/.ssh/
      state: directory
      mode: '0755'
    when: 
      - custom_user_setup == "yes"

  - name: finding pemfile name
    shell: echo {{ user_pemfile }} | awk -F/ '{print $NF}'
    register: pemfile_name
    when: 
      - custom_user_setup == "yes"

  # with custom user setup configurations in Debian, custom_os_user
  - name: adding permissions to custom user in Debian
    shell: | 
      cp /home/{{ debian_os_user_name }}/{{ pemfile_name.stdout }} /home/{{ customuser_name }}
      ssh-keygen -y -f /home/{{ customuser_name }}/{{ pemfile_name.stdout }} > /home/{{ customuser_name }}/.ssh/authorized_keys
      rm -f /home/{{ debian_os_user_name }}/{{ pemfile_name.stdout }}
      chown -R {{ customuser_name }}:{{ customuser_name }} /home/{{ customuser_name }}/
      chown -R {{ customuser_name }}:{{ customuser_name }} /wm-data 
      addgroup docker
      usermod -aG docker {{ customuser_name }}
    when: 
      - ansible_os_family == "Debian"
      - custom_user_setup == "yes"
    ignore_errors: True
  
  - name: installing wme setup with custom user ssh keys in Debian
    expect:
      command: bash /usr/local/content/wme/wme-installer/{{ wme_folder_name.stdout }}/wme-installer.sh
      responses:
        (?i)Enter an interface name assigned to a network *: "{{ platform_network_interfacename }}" # variable platform_network_interface_name
        (?i)Do you want to proceed *: y
        (?i)Enter an IP range in CIDR notation for internal use *: "{{ CIDR_range_for_wme_setup }}"  #variable CIDR_range_for_wme_setup
        (?i)Do you want to configure your own ssh keys*: y
        (?i)Enter an user*: "{{ customuser_name }}"
        (?i)Enter an keypath*: /home/{{ customuser_name }}/{{ pemfile_name.stdout }}
        (?i)Are you sure you want to continue connecting*: "yes"
      timeout: 1000
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
      - custom_user_setup == "yes"
    
  - name: installing wme setup without custom user ssh keys in Debian
    expect:
      command: bash /usr/local/content/wme/wme-installer/{{ wme_folder_name.stdout }}/wme-installer.sh
      responses:
        (?i)Enter an interface name assigned to a network *: "{{ platform_network_interfacename }}" # variable
        (?i)Do you want to proceed *: y
        (?i)Enter an IP range in CIDR notation for internal use *: "{{ CIDR_range_for_wme_setup }}"
        (?i)Do you want to configure your own ssh keys*: n
        (?i)Are you sure you want to continue connecting*: "yes"
      timeout: 1000
    when: 
      - installer_link != ""
      - ansible_os_family == "Debian"
      - custom_user_setup == "no"
  
#  with custom user configurations in RHEL
  - name: adding permissions to user in RHEL
    shell: |
      cp /home/{{ rhel_os_user_name }}/{{ pemfile_name.stdout }} /home/{{ customuser_name }}/
      ssh-keygen -y -f /home/{{ customuser_name }}/{{ pemfile_name.stdout }} > /home/{{ customuser_name }}/.ssh/authorized_keys
      rm -f /home/{{ rhel_os_user_name }}/{{ pemfile_name.stdout }}
      chown -R {{ customuser_name }}:{{ customuser_name }} /home/{{ customuser_name }}/
      chown -R {{ customuser_name }}:{{ customuser_name }} /wm-data 
      usermod -aG docker {{ customuser_name }}
    when: 
      - ansible_os_family == "RedHat"
      - custom_user_setup == "yes"
    ignore_errors: True

# Installing tar file and installing wme in RHEL instances
#echo {{ installer_link }} | awk -F/ '{print $8}' #

  

  - name: finding tar file name for extraction when url have sha1sum
    shell:
      cmd: echo {{ installer_link }} | awk -F/ '{print $8}' 
    register: wme_tar_installer
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
      - sha1sum_link != ""
    
    
  - name: finding tar file name when url have sha1sum
    shell: echo {{ wme_tar_installer.stdout }} | awk -F/ '{print $8}' | awk -F? '{print $1}'
    register: wme_tar_installer_file_name
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
      - sha1sum_link != ""
  
  - name: setting tarfile name from using sha1sum url
    set_fact:
      wme_tar_installer_name: "{{ wme_tar_installer_file_name.stdout }}"
    when: wme_tar_installer_file_name.changed 


  - name: finding tar file name for extraction without sha1sum url
    shell:
      cmd: echo {{ installer_link }} | awk -F/ '{print $8}' 
    register: wme_tar_installer_file_name
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
      - sha1sum_link == ""

  - name: setting tarfile name from without sha1sum url
    set_fact:
      wme_tar_installer_name: "{{ wme_tar_installer_file_name.stdout }}"
    when: wme_tar_installer_file_name.changed 

  - name: finding wme tar extraction folder name
    shell:
      cmd: echo {{ wme_tar_installer_name }} | awk -F- '{print $3}' | sed 's/.tar//g'
    register: wme_tar_folder
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
    

  - name: downloading the sha1sum file
    get_url: 
      url: "{{ sha1sum_link }}"
      dest: /home/{{ rhel_os_user_name }}/
      mode: '0755'
    when:
      - sha1sum_link != ""
      - ansible_os_family == "RedHat"
      
      

  - name: downloading wme tar file
    get_url:
      url: "{{ installer_link }}"
      dest: /home/{{ rhel_os_user_name }}/
      mode: 0755
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
    
  - name: sha1sum checking for wme installer file
    shell: sha1sum -c {{ sha1sum_file_name.stdout }}
    args:
      chdir: /home/{{ rhel_os_user_name }}/
    register: sha1sum_result
    failed_when: sha1sum_result.rc != 0
    when:
      - installer_link != ""
      - sha1sum_link != ""
      - ansible_os_family == "RedHat"
      
    
  - name: creating a wme setup directory for wme tar extraction
    file:
      path: /usr/local/content/{{ wme_tar_folder.stdout }}
      state: directory
      mode: 0755
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
    
  - name: extracting tar to the wme setup directory
    shell: 
      cmd: tar xvf {{ wme_tar_installer_name }} -C /usr/local/content/{{ wme_tar_folder.stdout }}
      chdir: /home/{{ rhel_os_user_name }}/
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"

  - name: setting python3
    shell:
      cmd: ln -fs /usr/bin/python3.6 /usr/bin/python
    when: ansible_os_family == "RedHat"

# wme setup on RHEL instance before 10.5.1 version
  - name: installing wme setup on rhel 
    expect:
      command: bash /usr/local/content/{{ wme_tar_folder.stdout }}/wme-installer.sh
      responses:
        (?i)Enter an interface name assigned to a network *: "{{ platform_network_interfacename }}"
        (?i)Do you want to proceed *: y
        (?i)Enter an IP range in CIDR notation for internal use *: "{{ CIDR_range_for_wme_setup }}"
      timeout: 1000
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
      - custom_user_setup == ""
    
# Installing wme with custom user configurations in RHEL
  - name: installing wme setup with custom user ssh keys in RHEL
    expect:
      command: bash /usr/local/content/{{ wme_tar_folder.stdout }}/wme-installer.sh
      responses:
        (?i)Enter an interface name assigned to a network *: "{{ platform_network_interfacename }}"
        (?i)Do you want to proceed *: y
        (?i)Enter an IP range in CIDR notation for internal use *: "{{ CIDR_range_for_wme_setup }}"
        (?i)Do you want to configure your own ssh keys*: y
        (?i)Enter an user*: "{{ customuser_name }}"
        (?i)Enter an keypath*: /home/{{ customuser_name }}/{{ pemfile_name.stdout }}
        (?i)Are you sure you want to continue connecting*: "yes"
      timeout: 1000
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
      - custom_user_setup == "yes"
    
  - name: installing wme setup without custom user ssh keys in RHEL
    expect:
      command: bash /usr/local/content/{{ wme_tar_folder.stdout }}/wme-installer.sh
      responses:
        (?i)Enter an interface name assigned to a network *: "{{ platform_network_interfacename }}"
        (?i)Do you want to proceed *: y
        (?i)Enter an IP range in CIDR notation for internal use *: "{{ CIDR_range_for_wme_setup }}"
        (?i)Do you want to configure your own ssh keys*: n
        (?i)Are you sure you want to continue connecting*: "yes"
      timeout: 1000
    when: 
      - installer_link != ""
      - ansible_os_family == "RedHat"
      - custom_user_setup == "no"

# config wizard setup for wme , with providing user details
  - name: setup admin password for config portal
    uri:
      url: http://{{ platform_ip }}:8080/config-services/rest/setup?password={{ admin_passwd }}
      method: POST
      return_content: yes
    when: installer_link != ""
  - name: login to config portal
    uri:
      url: http://{{ platform_ip }}:8080/config-services/rest/login
      method: POST
      return_content: yes
      body_format: json
      body: '{
          "name" : "setup-admin",
          "password" : "{{ admin_passwd }}"
        }'
    register: admin_login
    when: installer_link != ""

  - name: config portal setup
    uri:
      url: http://{{ platform_ip }}:8080/config-services/rest/configurations
      method: POST
      return_content: yes
      body_format: json
      body: '{
          "setupType": "EXPRESS",
          "environment": "PRODUCTION",
          "products": ["STUDIO"],
          "enterpriseName": "{{ enterprise_name }}",
          "entDomainName": "{{ ent_domain_name }}",
          "cloudDomainName": "{{ cloud_domain_name }}",
          "authSetup": "DB",
          "vcsSetup": "DEFAULT",
          "mailSetup": "DEFAULT",
          "adminUser": {
              "emailId": "{{ user_mail }}",
              "firstName": "{{ first_name }}",
              "lastName": "{{ last_name }}",
              "password": "{{ user_password }}",
              "entName": "{{ enterprise_name }}"
            }
        }'
      headers:
          cookie: "{{ admin_login.set_cookie }}"
    when: installer_link != ""


  - name: wme setup installation in config portal
    uri:
      url: http://{{ platform_ip }}:8080/config-services/rest/installations
      method: POST
      return_content: yes
      body_format: json
      body: '{
            "configId": "1",
            "installationAction": {
                  "action": "INIT"
                  }
              }'
      headers:
          cookie: "{{ admin_login.set_cookie }}"
    when: installer_link != ""





 
  

    








# updating the wme setup by running patch for debian OS instances
   
  - name: finding a patch deb file name
    shell:
      cmd: echo {{ patch_installer_link }} | awk -F/ '{print $8}'
      chdir: /home/{{ debian_os_user_name }}/
    register: patch_deb_file_name
    ignore_errors: True
    when: 
      - patch_installer_link != ""
      - ansible_os_family == "Debian"


  - name: downloading the wme_patch_file
    get_url: 
      url: "{{ patch_installer_link }}"
      dest: /home/{{ debian_os_user_name }}/
      mode: '0755'
    when: 
      - patch_installer_link != ""
      - ansible_os_family == "Debian"


  - name: unpack the patch debian file
    shell: dpkg -i {{ patch_deb_file_name.stdout }}
    args:
      chdir: /home/{{ debian_os_user_name }}/
    ignore_errors: True
    when: 
      - patch_installer_link != ""
      - ansible_os_family == "Debian"

  - name: getting wme-patch-installer folder name
    shell:
      cmd: echo {{ patch_deb_file_name.stdout }} | awk -F- '{print $3}' | sed 's/.deb//g'
      chdir: /home/{{ debian_os_user_name }}/
    register: wme_patch_folder_name
    ignore_errors: True
    when: 
      - patch_installer_link != ""
      - ansible_os_family == "Debian"

  - name: run wme patch
    expect:
      command: bash /usr/local/content/wme/wme-installer/{{ wme_patch_folder_name.stdout }}/wme-installer.sh
      responses: 
        Enter Admin Password: "{{ admin_passwd }}"
        Re-enter Admin Password: "{{ admin_passwd }}"
      timeout: 5000
    ignore_errors: true
    when: 
     - patch_installer_link != ""
     - ansible_os_family == "Debian"


  