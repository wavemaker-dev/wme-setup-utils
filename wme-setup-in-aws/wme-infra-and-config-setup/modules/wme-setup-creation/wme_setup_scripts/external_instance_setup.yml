---
- name: aws external instances setup
  hosts: all
  become: yes
  vars:
    rhel_os_version: "{{ operating_version }}"
    custom_user_setup: "{{ setup_with_custom_sshkeys }}"
    customuser_name: "{{ internal_user_for_wavemaker }}"
    rhel_os_user_name: "{{ os_user_name }}"
    debian_os_user_name: "{{ os_user_name }}"
    user_pemfile: "{{ internal_user_ssh_key_for_wavemaker }}"
  

  tasks:
  # aws instance operations(volume mounting)
  - name: finding volume device type for nitro volumes
    shell: lsblk -o NAME -n | grep nvme*
    register: nitro_volumes
    ignore_errors: True

  - name: finding volume device for ebs volumes
    shell: lsblk -o NAME -n | grep xvd*
    register: ebs_volumes
    ignore_errors: True

  - name: creating file system for EBS volumes
    filesystem:
      fstype: ext4
      dev: "{{ item }}"
    with_items:
      - /dev/xvdb
    when: ebs_volumes.rc == 0
  
  - name: creating file system for nitro volumes
    filesystem:
      fstype: ext4
      dev: "{{ item }}"
    with_items:
      - /dev/nvme1n1
    when: nitro_volumes.rc == 0

  - name: Create a directory data
    file:
      path: "{{ item }}"
      state: directory
      mode: '0755'
    with_items:
      - /data
  - name: mounting data volume for EBS volumes
    mount:
      path: /data
      src: /dev/xvdb
      fstype: ext4
      state: mounted
    when: ebs_volumes.rc == 0

  - name: mounting wm-data volume for nitro volumes
    mount:
      path: /data
      src: /dev/nvme1n1
      fstype: ext4
      state: mounted
    when: nitro_volumes.rc == 0
  
  - name: update cache for ubuntu
    apt:
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: update cache for RHEL
    yum:
      name: "*"
      state: latest
    when: ansible_os_family == "RedHat"

 # custom user creation
  - name: adding custom user
    user:
      name: "{{ customuser_name }}"
      shell: /bin/bash
    when: 
      - custom_user_setup == "yes"

  - name: creating .ssh folder for custom user
    file:
      path: /home/{{ customuser_name }}/.ssh/
      state: directory
      mode: '0755'
    when: 
      - custom_user_setup == "yes"

  - name: docker installation for custom user in ubuntu
    shell: |
      apt-get install apt-transport-https
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable" > /etc/apt/sources.list.d/docker.list
      apt-get update  
      apt-get install iptables ca-certificates
      apt-get install docker-ce=18.06.2~ce~3-0~ubuntu -y
    when: 
      - ansible_os_family == "Debian"
      - custom_user_setup == "yes"


  - name: creating docker service directory in ubuntu for custom user setup
    file:
      path: /etc/systemd/system/docker.service.d/
      state: directory
      mode: '0755'
    when: 
        - ansible_os_family == "Debian"
        - custom_user_setup == "yes"

  - name: finding pemfile name
    shell: echo {{ user_pemfile }} | awk -F/ '{print $NF}'
    register: pemfile_name
    when: 
      - custom_user_setup == "yes"
    
  - name: adding permissions to custom user in ubuntu
    shell: |
      cp /home/{{ debian_os_user_name }}/{{ pemfile_name.stdout }} /home/{{ customuser_name }}/ 
      ssh-keygen -y -f /home/{{ customuser_name }}/{{ pemfile_name.stdout }} > /home/{{ customuser_name }}/.ssh/authorized_keys
      rm -f /home/{{ debian_os_user_name }}/{{ pemfile_name.stdout }}
      chown -R {{ customuser_name }}:{{ customuser_name }} /home/{{ customuser_name }}/
      chown -R {{ customuser_name }}:{{ customuser_name }} /data
      chown -R {{ customuser_name }}:{{ customuser_name }} /etc/systemd/system/docker.service.d/
      usermod -aG docker {{ customuser_name }}
      echo "%{{ customuser_name }} ALL=NOPASSWD: /bin/systemctl restart docker.service,/bin/systemctl daemon-reload,/sbin/iptables" > /etc/sudoers.d/{{ customuser_name }}
    when: 
      - ansible_os_family == "Debian"
      - custom_user_setup == "yes"
    ignore_errors: True

  
  # installing pip3 and wget
  - name: installing pip3 and wget
    package:
      name: 
        - python3-pip
        - wget
      state: present

  - name: providing functionality pip using pip3
    alternatives:
      name: pip
      link: /usr/bin/pip
      path: /usr/bin/pip3
      priority: 1
    when: ansible_os_family == "RedHat"


# RHEL instance prerequisites installing and IPv6 disable
  - name: ipv6 disable in RHEL
    lineinfile:
      path: /etc/default/grub
      regexp: "^GRUB_CMDLINE_LINUX="
      line: 'GRUB_CMDLINE_LINUX="ipv6.disable=1 console=ttyS0,115200n8 console=tty0 net.ifnames=0 rd.blacklist=nouveau nvme_core.io_timeout=4294967295 crashkernel=auto"'
    when: ansible_os_family == "RedHat"    
  
  - name: updating grub conf file in rhel for ipv6 disable
    shell: grub2-mkconfig -o /boot/grub2/grub.cfg
    when: ansible_os_family == "RedHat"

  - name: reboot the system for updating the grub configurations
    reboot:
    when: ansible_os_family == "RedHat"
  
  - name: installing SELinux container on RHEL 7 form remote url
    yum:
      name: http://ftp.riken.jp/Linux/cern/centos/7/extras/x86_64/Packages/container-selinux-2.10-2.el7.noarch.rpm
      state: present
    when: 
      - ansible_os_family == "RedHat"
      - rhel_os_version == "7"

  
  - name: installing Docker and python3 in rhel
    yum:
      name: 
      - https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.06.2.ce-3.el7.x86_64.rpm
      - python3
    when: ansible_os_family == "RedHat"

  
  - name: starting Docker
    service: 
      name: docker
      state: started
      enabled: yes
    become: true
    when: ansible_os_family == "RedHat"

  - name: adding ec2 user to the docker group
    shell: usermod -aG docker {{ rhel_os_user_name }}
    when: 
     - ansible_os_family == "RedHat"
     - custom_user_setup == "yes"

  - name: reboot the system for docker configure
    reboot:
    when: 
     - ansible_os_family == "RedHat"
     - custom_user_setup == "yes"

# custom user permissions in RHEL instance
  - name: adding permissions to user in RHEL
    shell: |
      cp /home/{{ rhel_os_user_name }}/{{ pemfile_name.stdout }} /home/{{ customuser_name }}/
      ssh-keygen -y -f /home/{{ customuser_name }}/{{ pemfile_name.stdout }} > /home/{{ customuser_name }}/.ssh/authorized_keys
      rm -f /home/{{ rhel_os_user_name }}/{{ pemfile_name.stdout }}
      chown -R {{ customuser_name }}:{{ customuser_name }} /home/{{ customuser_name }}/
      chown -R {{ customuser_name }}:{{ customuser_name }} /data
      usermod -aG docker {{ customuser_name }}
      chown -R {{ customuser_name }}:{{ customuser_name }} /usr/lib/systemd/system
      echo "%{{ customuser_name }} ALL=NOPASSWD: /bin/systemctl restart docker.service,/bin/systemctl daemon-reload,/usr/sbin/iptables" >> /etc/sudoers.d/{{ customuser_name }}
      chown -R {{ customuser_name }}:{{ customuser_name }} /usr/lib/systemd/system/docker.service
    when: 
      - ansible_os_family == "RedHat"
      - custom_user_setup == "yes"
    ignore_errors: True